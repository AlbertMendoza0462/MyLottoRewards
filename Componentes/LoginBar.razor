@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (!IsLogged)
{
	<a class="btn btnLogin btn-outline-dark w-25 h-75" onclick="loginWithGoogle()" role="button">
		<img class="h-100" alt="Google sign-in" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png" />
		Login with Google
	</a>
	<a class="btn btnLogin btn-outline-dark w-25 h-75" onclick="loginWithFacebook()" role="button">
		<img class="h-100" alt="Facebook sign-in" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b8/2021_Facebook_icon.svg/640px-2021_Facebook_icon.svg.png" />
		Login with Facebook
	</a>
}
else
{
	<a class="btn btn-danger" @onclick="logout" role="button">
		Logout
	</a>
}

@code {
	public bool IsLogged { get; set; } = false;

	public async Task validarSesion()
	{
		string? userId = await sessionStorage.GetItemAsync<string>("UserIdApi");
		if (userId != null)
		{
			IsLogged = true;
		}
	}

	public void RedirectTo(string path)
	{
		JSRuntime.InvokeAsync<object>("clientJsfunctions.RedirectTo", path);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		validarSesion();
	}

	public async void logout()
	{
		await sessionStorage.RemoveItemAsync("Nombre");
		await sessionStorage.RemoveItemAsync("Email");
		await sessionStorage.RemoveItemAsync("UserIdApi");
		RedirectTo(navigationManager.Uri);
	}
}