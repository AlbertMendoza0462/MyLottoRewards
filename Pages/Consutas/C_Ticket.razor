@page "/Tickets"
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject TicketsBLL ticketsBLL

<EditForm Model="this">
	<div class="card">

		<div class="card-header">
			<h4>Consulta de Tickets</h4>
		</div>
		<div class="card-body">
			<div class="row justify-content-between mb-3">
				<div class="col-5">
					<div class="input-group">
						<span class="input-group-text">Desde</span>
						<InputDate @bind-Value="Desde" aria-label="Fecha Desde" class="form-control"/>
					</div>
				</div>
				<div class="col-5">
					<div class="input-group">
						<span class="input-group-text">Hasta</span>
						<InputDate @bind-Value="Hasta" aria-label="Fecha Hasta" class="form-control"/>
					</div>
				</div>
			</div>
			<button class="btn btn-outline-primary" @onclick="buscar"> <i class="oi oi-magnifying-glass" /> Buscar </button>
		</div>
	</div>

	<table class="table table-striped table-hover mt-4">

		<thead class="thead">
			<tr class="table">
				<th>TicketId</th>
				<th>Fecha</th>
			</tr>
		</thead>

		<tbody>
			@foreach (var item in Tickets)
			{
				<tr>
					<td><a href="Ticket/@item.TicketId">@item.TicketId</a></td>
					<td><a href="Ticket/@item.TicketId">@item.Fecha</a></td>
				</tr>
			}
		</tbody>
	</table>
</EditForm>
@code {
	public async Task validarSesion()
    {
        string? userId = await sessionStorage.GetItemAsync<string>("UserIdApi");
        if (userId == null)
        {
            RedirectTo("/");
        }
    }

    public void RedirectTo(string path)
    {
        JSRuntime.InvokeAsync<object>("clientJsfunctions.RedirectTo", path);
    }
	protected override void OnInitialized()
	{
		base.OnInitialized();
        validarSesion();

		Desde = new DateTime();
		Hasta = DateTime.Now;
	}

	public DateTime Desde { get; set; }
	public DateTime Hasta { get; set; }
	public List<Tickets> Tickets { get; set; } = new List<Tickets>();

	public void buscar()
	{
		List<Tickets>? lista = ticketsBLL.GetList();
		Tickets = (lista != null) ? lista : new List<Tickets>();
	}
}