@page "/Ganancia"
@page "/Ganancia/{GananciaId:int}"
@attribute [Authorize]
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject GananciasBLL gananciasBLL
@inject LoteriasBLL loteriasBLL
@inject TiposJugadasBLL tiposJugadasBLL
@inject UsuariosBLL usuariosBLL
@inject NotificationService notificationService
@inject DialogService dialogService

<EditForm Model="ganancia" OnValidSubmit="@guardar">
	<DataAnnotationsValidator />

	<div class="card mb-3">
		<div class="card-header">
			<h3 class="card-title">Registro de Ganancia</h3>
		</div>

		<div class="card-body">
			<div class="row mb-3 justify-content-between">
				<div class="col-3">
					<div class="input-group">
						<span class="input-group-text">GananciaId</span>
						<InputNumber @bind-Value="ganancia.GananciaId" class="form-control" />
						<button type="button" @onclick="btnBuscar" class="btn btn-info"><i class="oi oi-magnifying-glass" /></button>
					</div>
					<ValidationMessage For="@(() => ganancia.GananciaId)" />
				</div>
				<div class="col-3">
					<div class="input-group">
						<span class="input-group-text">Fecha</span>
						<InputDate @bind-Value="ganancia.Fecha" class="form-control" />
					</div>
				</div>
				<ValidationMessage For="@(() => ganancia.Fecha)" />
			</div>

			<div class="row mb-3">
				<div class="col-4">
					<div class="input-group">
						<span class="input-group-text">Loteria</span>
						<InputSelect @bind-Value="ganancia.LoteriaId" @onclick="cargarTiposJugadas" class="form-control">
							<option value="0"></option>
							@foreach (var itemLoteria in loterias)
							{
								<option value="@itemLoteria.LoteriaId">@itemLoteria.Descripcion</option>
							}
						</InputSelect>
					</div>
					<ValidationMessage For="@(() => ganancia.LoteriaId)" />
				</div>
				<div class="col-4">
					<div class="input-group">
						<span class="input-group-text">TipoJugada</span>
						<InputSelect @bind-Value="ganancia.TipoJugadaId" class="form-control">
							<option value="0"></option>
							@foreach (var itemTipoJugada in tiposJugadas)
							{
								<option value="@itemTipoJugada.TipoJugadaId">@itemTipoJugada.Descripcion</option>
							}
						</InputSelect>
					</div>
					<ValidationMessage For="@(() => ganancia.TipoJugadaId)" />
				</div>
			</div>
			<div class="row">
				<div class="col-4">
					<div class="input-group">
						<span class="input-group-text">Monto</span>
						<InputNumber @bind-Value="ganancia.Monto" class="form-control" />
					</div>
					<ValidationMessage For="@(() => ganancia.Monto)" />
				</div>
			</div>
		</div>

		<div class="card-footer">
			<div class="row justify-content-center">
				<div class="w-auto btn-group" role="group">
					<button type="button" @onclick="nuevo" class="btn btn-outline-primary"> <i class="oi oi-file" /> Nuevo</button>
					<button type="submit" class="btn btn-outline-success"> <i class="oi oi-document" /> Guardar</button>
					<button type="button" @onclick="eliminar" class="btn btn-outline-danger"> <i class="oi oi-trash" /> Eliminar</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int GananciaId { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState> authenticationState { get; set; }

	public int UsuarioId { get; set; }
	public Ganancias ganancia { get; set; }
	public List<Loterias> loterias { get; set; }
	public List<TiposJugadas> tiposJugadas { get; set; }
	public int tmpLoteriaId { get; set; }


	public void RedirectTo(string path)
	{
		JSRuntime.InvokeAsync<object>("clientJsfunctions.RedirectTo", path);
	}

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var authState = await authenticationState;
		var user = authState.User;

		Usuarios? us = usuariosBLL.BuscarPorUserIdApi(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
		if (us != null)
		{
			UsuarioId = us.UsuarioId;
		}
		nuevo();
		ganancia.GananciaId = GananciaId;
		if(ganancia.GananciaId > 0)
		{
			buscar(ganancia.GananciaId);
		}
		AsignarUsuarioId();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		List<Loterias>? tmpLoterias = loteriasBLL.GetList();
		tiposJugadas = new List<TiposJugadas>();
		tmpLoteriaId = 0;

		if (tmpLoterias != null)
		{
			loterias = tmpLoterias;
		}
		else
		{
			loterias = new List<Loterias>();
		}

		nuevo();
	}

	public void btnBuscar()
	{
		int tmpGananciaId = ganancia.GananciaId;
		buscar(ganancia.GananciaId);
		ganancia.GananciaId = tmpGananciaId;
	}

	public void cargarTiposJugadas()
	{
		if (ganancia.LoteriaId != tmpLoteriaId)
		{
			tmpLoteriaId = ganancia.LoteriaId;
			ganancia.TipoJugadaId = 0;
			List<TiposJugadas>? tmpTiposJugadas = tiposJugadasBLL.GetListByLoteria(ganancia.LoteriaId);
			if (tmpTiposJugadas != null)
			{
				tiposJugadas = tmpTiposJugadas;
			}
			else
			{
				tiposJugadas = new List<TiposJugadas>();
			}
		}
	}

	public void buscar(int gananciaId)
	{
		Ganancias? tmpGanancia = gananciasBLL.Buscar(UsuarioId, gananciaId);
		if (tmpGanancia != null)
		{
			ganancia = tmpGanancia;
			tiposJugadas = tiposJugadasBLL.GetListByLoteria(ganancia.LoteriaId);
			notificationService.Notify(new NotificationMessage {
				Severity = NotificationSeverity.Success,
				Summary = "Ganancia cargada!",
				Duration = 4000
			});
		}
		else
		{
			nuevo();
			notificationService.Notify(new NotificationMessage {
				Severity = NotificationSeverity.Warning,
				Summary = "Ganancia no encontrada!",
				Duration = 4000
			});
		}
	}

	public void nuevo()
	{
		ganancia = new Ganancias();
		AsignarUsuarioId();
		tiposJugadas = new List<TiposJugadas>();
		tmpLoteriaId = 0;
	}

	public async void AsignarUsuarioId()
	{
		ganancia.UsuarioId = UsuarioId;
	}

	public void guardar()
	{
		if (gananciasBLL.Guardar(UsuarioId, ganancia))
		{
			nuevo();
			notificationService.Notify(new NotificationMessage {
				Severity = NotificationSeverity.Success,
				Summary = "Ganancia registrada!",
				Duration = 4000
			});
		}
		else
		{
			notificationService.Notify(new NotificationMessage {
				Severity = NotificationSeverity.Error,
				Summary = "La ganancia no se pudo guardar!",
				Duration = 4000
			});
		}
	}

	public async Task eliminar()
	{
		bool? confirm = await dialogService.Confirm("Seguro que desea eliminar la ganancia?", "Confirme", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
		if(confirm == true)
		{
			if (ganancia.GananciaId > 0 && gananciasBLL.Eliminar(UsuarioId, ganancia))
			{
				nuevo();
				notificationService.Notify(new NotificationMessage {
					Severity = NotificationSeverity.Info,
					Summary = "Ganancia eliminada!",
					Duration = 4000
				});
			}
			else
			{
				notificationService.Notify(new NotificationMessage {
					Severity = NotificationSeverity.Error,
					Summary = "La ganancia no se pudo eliminar!",
					Duration = 4000
				});
			}
		}
	}
}
